name: autoBuilder

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
          - os: macOS-14
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Debug
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug
          #- os: macOS-14
            #c_compiler: clang
            #cpp_compiler: clang++
            #build_type: Debug
    steps:
    - uses: actions/checkout@v4
      with: 
        lfs: false
        fetch-depth: 1

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: replace apple clang
      id: replace_apple_clang
      shell: bash
      if: runner.os == 'macOS'
      run: |
        #brew update
        #brew install llvm
        #echo "LLVM_PREFIX=$(brew --prefix llvm)" >> $GITHUB_ENV
        #echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        #echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
        #echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
        #echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV
        #echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
        #which clang && clang --version

        #export CC="$(brew --prefix llvm)/bin/clang"
        #export CXX="$(brew --prefix llvm)/bin/clang++"
        #export SDKROOT="$(xcrun --show-sdk-path)"
        #export MACOSX_DEPLOYMENT_TARGET=13.0

        echo "SDKROOT=$SDKROOT"
        echo "CC=$CC"
        echo "CXX=$CXX"

    - name: set conan
      id: set_conan
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install conan
        conan profile detect --force

    - name: init conan on windows
      id: init_conan_windows
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        cd "$env:GITHUB_WORKSPACE"
        ./BuildInitwithConan.bat . dynamic ${{ matrix.build_type }}
        
        
    - name: init conan on linux
      id: init_conan_on_linux
      shell: bash
      if: runner.os != 'Windows'
      run: |
        cd ${{ github.workspace }}
        bash BuildInitwithConan.sh . ${{ matrix.build_type }}
    
        
            

    - name: pull pdje
      id: pull_main_pdje
      shell: bash
      run: |
        GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/Rliop913/Project_DJ_Engine.git Project_DJ_Engine
        ls Project_DJ_Engine/include
        
    - name: set linux Requirements
      id: set_libevdev_and_ccache
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install libevdev-dev ccache swig

    - name: set macOS Requirements
      id: set_macos_ccache_swig
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install swig ccache

    
    - name: Configure CMake
      shell: bash
      run: >
        cmake -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}"/conan_cmakes/conan_toolchain.cmake
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}
    - name: Upload failed artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.build_type }}-failedbuild
        path: ${{ steps.strings.outputs.build-output-dir }}
    - name: stage files
      if: success()
      id: stage_valid_files
      shell: bash
      run: |
        mkdir -p staged_bins
        find ./build -type f -name "*PDJE*" | grep -E "\.(so|dll|dylib)$" | while read -r file; do
          echo "found: $file"
          cp -v "$file" ./staged_bins
        done
        find ./conan_cmakes/direct_deploy/highway/ '(' -type f -o -type l ')' -name "*hwy.*" | grep -E "\.(so|dll|dylib)" | while read -r file; do
          echo "found: $file"
          cp -av "$file" ./staged_bins
        done


    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.build_type }}-success_builds
        path: staged_bins

    - name: stage versions
      if: runner.os == 'Linux' && matrix.build_type == 'Release'
      id: stage_valid_versions
      shell: bash
      run: |
        mkdir -p versions
        find ./ -type f -name "PDJE_VERSION" -print0 | xargs -0 cp -t versions/
        find ./ -type f -name "PDJE_WRAPPER_VERSION" -print0 | xargs -0 cp -t versions/
        

        
    - name: Upload versions
      if: runner.os == 'Linux' && matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: version-of-success_builds
        path: versions

  autoUpload:
    name: Post step
    needs: build
    runs-on: ubuntu-latest
    if: success()
    env:
      GH_TOKEN: ${{ secrets.PDJE_AUTO_PUSH }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '*success_builds'
          merge-multiple: false
          path: builds

      - run: |
          tree .
          gh auth setup-git 
          gh repo clone https://github.com/Rliop913/Project_DJ_Godot
          mkdir -p Project_DJ_Godot/addons/Prebuilts/win/release
          mkdir -p Project_DJ_Godot/addons/Prebuilts/linux/release
          mkdir -p Project_DJ_Godot/addons/Prebuilts/macOS/release
          mkdir -p Project_DJ_Godot/addons/Prebuilts/win/debug
          mkdir -p Project_DJ_Godot/addons/Prebuilts/linux/debug
          #mkdir -p Project_DJ_Godot/addons/Prebuilts/macOS/debug
          
          cp builds/windows-latest-Release-success_builds/* Project_DJ_Godot/addons/Prebuilts/win/release
          cp builds/ubuntu-latest-Release-success_builds/* Project_DJ_Godot/addons/Prebuilts/linux/release
          cp builds/macOS-14-Release-success_builds/* Project_DJ_Godot/addons/Prebuilts/macOS/release
          cp builds/windows-latest-Debug-success_builds/* Project_DJ_Godot/addons/Prebuilts/win/debug
          cp builds/ubuntu-latest-Debug-success_builds/* Project_DJ_Godot/addons/Prebuilts/linux/debug
          # cp builds/macOS-latest-Debug-success_builds/* Project_DJ_Godot/addons/Prebuilts/macOS/debug

          cp builds/version-of-success_builds/* Project_DJ_Godot/
          
          cd Project_DJ_Godot
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config lfs.url "https://rrop:${{ secrets.LFS_TOKEN }}@pdje.uk/rrop/PDJE_LFS_REPO.git/info/lfs"
          git lfs track "addons/**"
          git add .gitattributes addons/ PDJE_VERSION PDJE_WRAPPER_VERSION 
          git commit -m "AUTO_PUBLISH_TRIG $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin main
      
